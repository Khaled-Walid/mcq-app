{"version":3,"sources":["features/slices/nameSlice.js","features/slices/cardSwitcherSlice.js","features/slices/questionSlice.js","features/components/NameCard.jsx","features/components/Choice.jsx","features/components/QuestionCard.jsx","features/components/ResultCard.jsx","App.js","app/store.js","index.js"],"names":["nameSlice","createSlice","name","initialState","reducers","setName","_state","action","payload","actions","selectName","state","cardSwitcherSlice","gotoQuestion","gotoResult","selectCurrentCard","cardSwitcher","shuffle","inputArray","array","shuffled","length","randomIndex","Math","floor","random","push","splice","questionSlice","score","questions","question","choices","correct","incrementScore","shuffleQuestions","shuffledChoices","map","selectScore","questionCard","selectQuestions","useStyles","makeStyles","container","display","justifyContent","alignItems","card","width","margin","textField","NameCard","props","classes","dispatch","useDispatch","useSelector","Container","className","Card","CardContent","TextField","id","label","variant","placeholder","onChange","e","target","value","CardActions","Button","size","onClick","Choice","FormControlLabel","control","Radio","checked","QuestionCard","useState","currentQuestionIndex","setCurrentQuestionIndex","selectedChoice","setSelectedChoice","choiceList","choice","handleChoiceClick","toString","FormControl","component","FormLabel","sx","fontSize","color","RadioGroup","prev","ResultCard","Typography","gutterBottom","App","currentCard","store","configureStore","reducer","nameReducer","cardSwitcherReducer","questionCardReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6da2f088.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = \"\";\r\n\r\nexport const nameSlice = createSlice({\r\n  name: \"name\",\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    setName: (_state, action) => {\r\n      return action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setName } = nameSlice.actions;\r\n\r\nexport const selectName = (state) => state.name;\r\n\r\nexport default nameSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = \"name\";\n\nexport const cardSwitcherSlice = createSlice({\n  name: \"cardSwitcher\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    gotoQuestion() {\n      return \"question\";\n    },\n    gotoResult() {\n      return \"result\";\n    },\n  },\n});\n\nexport const { gotoQuestion, gotoResult } = cardSwitcherSlice.actions;\n\nexport const selectCurrentCard = (state) => state.cardSwitcher;\n\nexport default cardSwitcherSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  score: 0,\n  questions: [\n    { question: \"1 + 1 + 1 = ?\", choices: [1, 2, 3, 4], correct: 3 },\n    { question: \"2 + 2 + 2 = ?\", choices: [2, 4, 6, 8], correct: 6 },\n    { question: \"3 + 3 + 3 = ?\", choices: [9, 18, 20, 22], correct: 9 },\n    { question: \"4 + 4 + 4 = ?\", choices: [10, 12, 13, 14], correct: 12 },\n    { question: \"5 + 5 + 5 = ?\", choices: [1, 15, 40, 200], correct: 15 },\n  ],\n};\n\nfunction shuffle(inputArray) {\n  const array = [...inputArray];\n  const shuffled = [];\n  while (array.length !== 0) {\n    const randomIndex = Math.floor(Math.random() * array.length);\n    shuffled.push(array[randomIndex]);\n    array.splice(randomIndex, 1);\n  }\n  return shuffled;\n}\n\nexport const questionSlice = createSlice({\n  name: \"questionCard\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    incrementScore(state) {\n      state.score += 1;\n    },\n    shuffleQuestions(state) {\n      const shuffledQuestions = shuffle(state.questions);\n      const shuffledChoices = shuffledQuestions.map((question) => {\n        return {\n          ...question,\n          choices: shuffle(question.choices),\n        };\n      });\n      state.questions = shuffledChoices;\n    },\n  },\n});\n\nexport const { incrementScore, shuffleQuestions } = questionSlice.actions;\n\nexport const selectScore = (state) => state.questionCard.score;\n\nexport const selectQuestions = (state) => state.questionCard.questions;\n\nexport default questionSlice.reducer;\n","import Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Container from \"@mui/material/Container\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setName, selectName } from \"../slices/nameSlice\";\nimport { gotoQuestion } from \"../slices/cardSwitcherSlice\";\nimport { shuffleQuestions } from \"../slices/questionSlice\";\n\nconst useStyles = makeStyles({\n  container: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  card: {\n    width: \"fit-content\",\n    margin: \"10% auto\",\n  },\n  textField: {\n    width: \"100%\",\n  },\n});\n\nfunction NameCard(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const name = useSelector(selectName);\n\n  const handleChange = (e) => dispatch(setName(e.target.value));\n  const handleClick = () => {\n    dispatch(shuffleQuestions());\n    dispatch(gotoQuestion());\n  };\n\n  return (\n    <Container className={classes.container}>\n      <Card className={classes.card}>\n        <CardContent>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Name\"\n            variant=\"outlined\"\n            placeholder=\"Enter your name..\"\n            className={classes.textField}\n            onChange={handleChange}\n            value={name}\n          />\n        </CardContent>\n        <CardActions>\n          <Button size=\"small\" onClick={handleClick}>\n            Take test\n          </Button>\n        </CardActions>\n      </Card>\n    </Container>\n  );\n}\n\nexport default NameCard;\n","import Radio from \"@mui/material/Radio\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\n\nfunction Choice(props) {\n  return (\n    <FormControlLabel\n      value={props.value}\n      control={<Radio />}\n      label={props.value}\n      onClick={props.onClick}\n      checked={props.checked}\n    />\n  );\n}\n\nexport default Choice;\n","import Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport Choice from \"./Choice\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { gotoResult } from \"../slices/cardSwitcherSlice\";\r\nimport {\r\n  incrementScore,\r\n  selectQuestions,\r\n} from \"../slices/questionSlice\";\r\nimport { Button, CardActions } from \"@mui/material\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  card: {\r\n    width: \"fit-content\",\r\n    margin: \"10% auto\",\r\n  },\r\n});\r\n\r\nfunction QuestionCard() {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedChoice, setSelectedChoice] = useState(null);\r\n  const questions = useSelector(selectQuestions);\r\n  const question = questions[currentQuestionIndex];\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const choiceList = question.choices.map((choice) => {\r\n    return (\r\n      <Choice\r\n        key={choice}\r\n        onClick={handleChoiceClick}\r\n        value={choice}\r\n        checked={selectedChoice === choice.toString()}\r\n      ></Choice>\r\n    );\r\n  });\r\n\r\n  function handleNext() {\r\n    if (selectedChoice === question.correct.toString()) {\r\n      dispatch(incrementScore());\r\n    }\r\n    if (currentQuestionIndex < questions.length - 1) {\r\n      setSelectedChoice(null);\r\n      setCurrentQuestionIndex((prev) => {\r\n        return prev + 1;\r\n      });\r\n    } else {\r\n      dispatch(gotoResult());\r\n    }\r\n  }\r\n  function handleChoiceClick(e) {\r\n    setSelectedChoice(e.target.value);\r\n  }\r\n  return (\r\n    <Container className={classes.container}>\r\n      <Card className={classes.card}>\r\n        <CardContent>\r\n          <FormControl component=\"fieldset\">\r\n            <FormLabel\r\n              component=\"legend\"\r\n              sx={{\r\n                fontSize: \"1.5em\",\r\n                color: \"black\",\r\n              }}\r\n            >\r\n              {question.question}\r\n            </FormLabel>\r\n            <RadioGroup aria-label=\"question\" name=\"radio-buttons-group\">\r\n              {choiceList}\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button size=\"small\" onClick={handleNext}>\r\n            Next\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default QuestionCard;\r\n","import Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Container from \"@mui/material/Container\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Typography } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\nimport { selectName } from \"../slices/nameSlice\";\nimport {\n  selectQuestions,\n  selectScore,\n} from \"../slices/questionSlice\";\n\nconst useStyles = makeStyles({\n  container: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  card: {\n    width: \"fit-content\",\n    margin: \"10% auto\",\n  },\n  textField: {\n    width: \"100%\",\n  },\n});\n\nfunction ResultCard() {\n  const classes = useStyles();\n  const name = useSelector(selectName);\n  const score = useSelector(selectScore);\n  const questions = useSelector(selectQuestions);\n  return (\n    <Container className={classes.container}>\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom component=\"div\">\n            Hi {name},<br/>\n            The test is finished.\n            <br/>\n            Your result:&nbsp;\n            {score} out of {questions.length}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n}\n\nexport default ResultCard;\n","import React from \"react\";\nimport NameCard from \"./features/components/NameCard\";\nimport QuestionCard from \"./features/components/QuestionCard\";\nimport ResultCard from \"./features/components/ResultCard\";\nimport { useSelector } from 'react-redux';\nimport { selectCurrentCard } from './features/slices/cardSwitcherSlice';\n\nfunction App() {\n  const currentCard = useSelector(selectCurrentCard);\n  return (\n    <>\n      {currentCard === \"name\" && <NameCard></NameCard>}\n      {currentCard === \"question\" && <QuestionCard></QuestionCard>}\n      {currentCard === \"result\" && <ResultCard></ResultCard>}\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport nameReducer from \"../features/slices/nameSlice\";\nimport cardSwitcherReducer from \"../features/slices/cardSwitcherSlice\";\nimport questionCardReducer from \"../features/slices/questionSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    name: nameReducer,\n    cardSwitcher: cardSwitcherReducer,\n    questionCard: questionCardReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}